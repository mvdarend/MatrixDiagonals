@page "/"
Grid size:
<input type="text" value="@gridSize" @oninput="createGrid">
<br />
<hr />
<br />

@foreach (int matrixField in Enumerable.Range(0, gridSize * gridSize))
{
	int x = matrixField;
	<input type="number" min="-100" max="100" value="@matrixValueList[x]" @oninput="(e) => onChange(x, e)">
	if ((x + 1) % gridSize == 0)
	{
		<br>
	}
}
<br />
<hr />
<br />
<b>Answer:</b> @answer

@code
{
	private int gridSize = 0, answer = 0;
	private List<int> matrixValueList = new List<int>();

	private void createGrid(ChangeEventArgs e)
	{
		if (Int32.TryParse(e.Value.ToString(), out int givenValue))
		{
			answer = 0;
			gridSize = givenValue;
			matrixValueList.Clear();
			matrixValueList.AddRange(Enumerable.Range(0, gridSize * gridSize).Select(_ => 0));
			StateHasChanged();
		}
	}

	private void onChange(int i, ChangeEventArgs e)
	{
		if (Int32.TryParse(e.Value.ToString(), out int givenValue))
		{
			matrixValueList[i] = givenValue;
			answer = Matrix.Bll.Calculations.CalculateMatrix(matrixValueList);
		}
	}
}
